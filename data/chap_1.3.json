[
  {
    "type": "h2",
    "content": "1.3   Defining New Functions"
  },
  {
    "type": "p",
    "content": "We have identified in Python some of the elements that must appear in any\npowerful programming language:"
  },
  {
    "type": "p",
    "content": "Now we will learn aboutfunction definitions, a much more powerful abstraction\ntechnique by which a name can be bound to compound operation, which can then be\nreferred to as a unit."
  },
  {
    "type": "p",
    "content": "We begin by examining how to express the idea ofsquaring. We might say, \"To\nsquare something, multiply it by itself.\" This is expressed in Python as"
  },
  {
    "type": "code",
    "content": ">>> def square(x):\n        return mul(x, x)\n"
  },
  {
    "type": "p",
    "content": "which defines a new function that has been given the namesquare.\nThis user-defined function is not built into the interpreter. It represents the\ncompound operation of multiplying something by itself. Thexin this\ndefinition is called aformal parameter, which provides a name for the thing\nto be multiplied. The definition creates this user-defined function and\nassociates it with the namesquare."
  },
  {
    "type": "p",
    "content": "How to define a function.Function definitions consist of adefstatement that indicates a<name>and a comma-separated list of named<formal parameters>, then areturnstatement, called the function body,\nthat specifies the<return expression>of the function, which is an\nexpression to be evaluated whenever the function is applied:"
  },
  {
    "type": "p",
    "content": "The second linemustbe indented — most programmers use four spaces to indent.\nThe return expression is not evaluated right away; it is stored as part of the\nnewly defined function and evaluated only when the function is eventually\napplied."
  },
  {
    "type": "p",
    "content": "Having definedsquare, we can apply it with a call expression:"
  },
  {
    "type": "code",
    "content": ">>> square(21)\n441\n>>> square(add(2, 5))\n49\n>>> square(square(3))\n81\n"
  },
  {
    "type": "p",
    "content": "We can also usesquareas a building block in defining other functions. For\nexample, we can easily define a functionsum_squaresthat, given any two\nnumbers as arguments, returns the sum of their squares:"
  },
  {
    "type": "code",
    "content": ">>> def sum_squares(x, y):\n        return add(square(x), square(y))\n"
  },
  {
    "type": "code",
    "content": ">>> sum_squares(3, 4)\n25\n"
  },
  {
    "type": "p",
    "content": "User-defined functions are used in exactly the same way as built-in functions.\nIndeed, one cannot tell from the definition ofsum_squareswhethersquareis built into the interpreter, imported from a module, or defined by\nthe user."
  },
  {
    "type": "p",
    "content": "Bothdefstatements and assignment statements bind names to values, and any\nexisting bindings are lost.  For example,gbelow first refers to a function\nof no arguments, then a number, and then a different function of two arguments."
  },
  {
    "type": "code",
    "content": ">>> def g():\n        return 1\n>>> g()\n1\n>>> g = 2\n>>> g\n2\n>>> def g(h, i):\n        return h + i\n>>> g(1, 2)\n3\n"
  },
  {
    "type": "h3",
    "content": "1.3.1   Environments"
  },
  {
    "type": "p",
    "content": "Our subset of Python is now complex enough that the meaning of programs is\nnon-obvious. What if a formal parameter has the same name as a built-in\nfunction?  Can two functions share names without confusion?  To resolve such\nquestions, we must describe environments in more detail."
  },
  {
    "type": "p",
    "content": "An environment in which an expression is evaluated consists of a sequence offrames, depicted as boxes. Each frame containsbindings, each of which\nassociates a name with its corresponding value. There is a singleglobalframe. Assignment and import statements add entries to the first frame of the\ncurrent environment. So far, our environment consists only of the global frame."
  },
  {
    "type": "p",
    "content": "Thisenvironment diagramshows the bindings of the current environment, along\nwith the values to which names are bound. The environment diagrams in this text\nare interactive: you can step through the lines of the small program on the\nleft to see the state of the environment evolve on the right. You can also\nclick on the \"Edit code in Online Python Tutor\" link to load the example into\ntheOnline Python Tutor, a tool\ncreated byPhilip Guofor generating these\nenvironment diagrams. You are encouraged to create examples yourself and study\nthe resulting environment diagrams."
  },
  {
    "type": "p",
    "content": "Functions appear in environment diagrams as well. Animportstatement binds\na name to a built-in function. Adefstatement binds a name to a\nuser-defined function created by the definition. The resulting environment\nafter importingmuland definingsquareappears below:"
  },
  {
    "type": "p",
    "content": "Each function is a line that starts withfunc, followed by the function\nname and formal parameters. Built-in functions such asmuldo not have\nformal parameter names, and so...is always used instead."
  },
  {
    "type": "p",
    "content": "The name of a function is repeated twice, once in the frame and again as part of the function itself.\nThe name appearing in the function is called theintrinsic name. The name in\na frame is abound name. There is a difference between the two: different\nnames may refer to the same function, but that function itself has only one\nintrinsic name."
  },
  {
    "type": "p",
    "content": "The name bound to a function in a frame is the one used during evaluation. The\nintrinsic name of a function does not play a role in evaluation. Step through\nthe example below using theForwardbutton to see that once the namemaxis bound to the value 3, it can no longer be used as a function."
  },
  {
    "type": "p",
    "content": "The error messageTypeError: 'int' object is not callableis reporting that\nthe namemax(currently bound to the number 3) is an integer and not a\nfunction.  Therefore, it cannot be used as the operator in a call expression."
  },
  {
    "type": "p",
    "content": "Function Signatures.Functions differ in the number of arguments that they\nare allowed to take. To track these requirements, we draw each function in a\nway that shows the function name and its formal parameters. The user-defined\nfunctionsquaretakes onlyx; providing more or fewer arguments will\nresult in an error.  A description of the formal parameters of a function is\ncalled the function's signature."
  },
  {
    "type": "p",
    "content": "The functionmaxcan take an arbitrary number of arguments. It is rendered\nasmax(...). Regardless of the number of arguments taken, all built-in\nfunctions will be rendered as<name>(...), because these primitive\nfunctions were never explicitly defined."
  },
  {
    "type": "h3",
    "content": "1.3.2   Calling User-Defined Functions"
  },
  {
    "type": "p",
    "content": "To evaluate a call expression whose operator names a user-defined function, the\nPython interpreter follows a computational process. As with any call\nexpression, the interpreter evaluates the operator and operand expressions, and\nthen applies the named function to the resulting arguments."
  },
  {
    "type": "p",
    "content": "Applying a user-defined function introduces a secondlocalframe, which is\nonly accessible to that function. To apply a user-defined function to some\narguments:"
  },
  {
    "type": "p",
    "content": "The environment in which the body is evaluated consists of two frames: first the\nlocal frame that contains formal parameter bindings, then the global frame that\ncontains everything else. Each instance of a function application has its own\nindependent local frame."
  },
  {
    "type": "p",
    "content": "To illustrate an example in detail, several steps of the environment diagram\nfor the same example are depicted below.  After executing the first import\nstatement, only the namemulis bound in the global frame."
  },
  {
    "type": "p",
    "content": "First, the definition statement for the functionsquareis executed.\nNotice that the entiredefstatement is processed in a single step. The\nbody of a function is not executed until the function is called (not when it is\ndefined)."
  },
  {
    "type": "p",
    "content": "Next, Thesquarefunction is called with the argument-2, and so a\nnew frame is created with the formal parameterxbound to the value-2."
  },
  {
    "type": "p",
    "content": "Then, the namexis looked up in the current environment, which consists of\nthe two frames shown.  In both occurrences,xevaluates to-2, and so\nthesquarefunction returns 4."
  },
  {
    "type": "p",
    "content": "The \"Return value\" in thesquare()frame is not a name binding; instead it\nindicates the value returned by the function call that created the frame."
  },
  {
    "type": "p",
    "content": "Even in this simple example, two different environments are used.  The\ntop-level expressionsquare(-2)is evaluated in the global environment,\nwhile the return expressionmul(x, x)is evaluated in the environment\ncreated for by callingsquare. Bothxandmulare bound in this\nenvironment, but in different frames."
  },
  {
    "type": "p",
    "content": "The order of frames in an environment affects the value returned by looking up a\nname in an expression. We stated previously that a name is evaluated to the\nvalue associated with that name in the current environment. We can now be more\nprecise:"
  },
  {
    "type": "p",
    "content": "Name Evaluation.A name evaluates to the value bound to that name in the\nearliest frame of the current environment in which that name is found."
  },
  {
    "type": "p",
    "content": "Our conceptual framework of environments, names, and functions constitutes amodel of evaluation; while some mechanical details are still unspecified\n(e.g., how a binding is implemented), our model does precisely and correctly\ndescribe how the interpreter evaluates call expressions. In Chapter 3 we will\nsee how this model can serve as a blueprint for implementing a working\ninterpreter for a programming language."
  },
  {
    "type": "h3",
    "content": "1.3.3   Example: Calling a User-Defined Function"
  },
  {
    "type": "p",
    "content": "Let us again consider our two simple function definitions and illustrate the\nprocess that evaluates a call expression for a user-defined function."
  },
  {
    "type": "p",
    "content": "Python first evaluates the namesum_squares, which is bound to a\nuser-defined function in the global frame. The primitive numeric expressions 5\nand 12 evaluate to the numbers they represent."
  },
  {
    "type": "p",
    "content": "Next, Python appliessum_squares, which introduces a local frame that binds\nx to 5 and y to 12."
  },
  {
    "type": "p",
    "content": "The body ofsum_squarescontains this call expression:"
  },
  {
    "type": "p",
    "content": "All three subexpressions are evaluated in the current environment, which begins\nwith the frame labeledsum_squares().  The operator subexpressionaddis a name found in the global frame, bound to the built-in function for\naddition. The two operand subexpressions must be evaluated in turn, before\naddition is applied.  Both operands are evaluated in the current environment\nbeginning with the frame labeledsum_squares."
  },
  {
    "type": "p",
    "content": "Inoperand 0,squarenames a user-defined function in the global frame,\nwhilexnames the number 5 in the local frame. Python appliessquareto\n5 by introducing yet another local frame that binds x to 5."
  },
  {
    "type": "p",
    "content": "Using this environment, the expressionmul(x, x)evaluates to 25."
  },
  {
    "type": "p",
    "content": "Our evaluation procedure now turns tooperand 1, for whichynames the\nnumber 12. Python evaluates the body ofsquareagain, this time introducing\nyet another local frame that bindsxto 12. Hence,operand 1evaluates\nto 144."
  },
  {
    "type": "p",
    "content": "Finally, applying addition to the arguments 25 and 144 yields a final return\nvalue forsum_squares: 169."
  },
  {
    "type": "p",
    "content": "This example illustrates many of the fundamental ideas we have developed so\nfar.  Names are bound to values, which are distributed across many independent\nlocal frames, along with a single global frame that contains shared names. A\nnew local frame is introduced every time a function is called, even if the same\nfunction is called twice."
  },
  {
    "type": "p",
    "content": "All of this machinery exists to ensure that names resolve to the correct values\nat the correct times during program execution.  This example illustrates why our\nmodel requires the complexity that we have introduced. All three local frames\ncontain a binding for the namex, but that name is bound to different values\nin different frames.  Local frames keep these names separate."
  },
  {
    "type": "h3",
    "content": "1.3.4   Local Names"
  },
  {
    "type": "p",
    "content": "One detail of a function's implementation that should not affect the function's\nbehavior is the implementer's choice of names for the function's formal\nparameters. Thus, the following functions should provide the same behavior:"
  },
  {
    "type": "code",
    "content": ">>> def square(x):\n        return mul(x, x)\n>>> def square(y):\n        return mul(y, y)\n"
  },
  {
    "type": "p",
    "content": "This principle -- that the meaning of a function should be independent of the\nparameter names chosen by its author -- has important consequences for\nprogramming languages. The simplest consequence is that the parameter names of a\nfunction must remain local to the body of the function."
  },
  {
    "type": "p",
    "content": "If the parameters were not local to the bodies of their respective functions,\nthen the parameterxinsquarecould be confused with the parameterxinsum_squares. Critically, this is not the case: the binding forxin\ndifferent local frames are unrelated. The model of computation is carefully\ndesigned to ensure this independence."
  },
  {
    "type": "p",
    "content": "We say that thescopeof a local name is limited to the body of the\nuser-defined function that defines it. When a name is no longer accessible, it\nis out of scope. This scoping behavior isn't a new fact about our model; it is a\nconsequence of the way environments work."
  },
  {
    "type": "h3",
    "content": "1.3.5   Choosing Names"
  },
  {
    "type": "p",
    "content": "The interchangeability of names does not imply that formal parameter names do not\nmatter at all. On the contrary, well-chosen function and parameter names are\nessential for the human interpretability of function definitions!"
  },
  {
    "type": "p",
    "content": "The following guidelines are adapted from thestyle guide for Python code,\nwhich serves as a guide for all (non-rebellious) Python programmers. A shared\nset of conventions smooths communication among members of a developer\ncommunity. As a side effect of following these conventions, you will find that\nyour code becomes more internally consistent."
  },
  {
    "type": "p",
    "content": "There are many exceptions to these guidelines, even in the Python standard\nlibrary. Like the vocabulary of the English language, Python has inherited\nwords from a variety of contributors, and the result is not always consistent."
  },
  {
    "type": "h3",
    "content": "1.3.6   Functions as Abstractions"
  },
  {
    "type": "p",
    "content": "Though it is very simple,sum_squaresexemplifies the most powerful\nproperty of user-defined functions. The functionsum_squaresis defined in\nterms of the functionsquare, but relies only on the relationship thatsquaredefines between its input arguments and its output values."
  },
  {
    "type": "p",
    "content": "We can writesum_squareswithout concerning ourselves withhowto square\na number. The details of how the square is computed can be suppressed, to be\nconsidered at a later time. Indeed, as far assum_squaresis concerned,squareis not a particular function body, but rather an abstraction of a\nfunction, a so-called functional abstraction. At this level of abstraction, any\nfunction that computes the square is equally good."
  },
  {
    "type": "p",
    "content": "Thus, considering only the values they return, the following two functions for\nsquaring a number should be indistinguishable. Each takes a numerical argument\nand produces the square of that number as the value."
  },
  {
    "type": "code",
    "content": ">>> def square(x):\n        return mul(x, x)\n>>> def square(x):\n        return mul(x, x-1) + x\n"
  },
  {
    "type": "p",
    "content": "In other words, a function definition should be able to suppress details. The\nusers of the function may not have written the function themselves, but may have\nobtained it from another programmer as a \"black box\". A programmer should not\nneed to know how the function is implemented in order to use it.  The Python\nLibrary has this property. Many developers use the functions defined there, but\nfew ever inspect their implementation."
  },
  {
    "type": "p",
    "content": "Aspects of a functional abstraction.To master the use of a functional\nabstraction, it is often useful to consider its three core attributes. Thedomainof a function is the set of arguments it can take.  Therangeof a\nfunction is the set of values it can return. Theintentof a function is the\nrelationship it computes between inputs and output (as well as any side effects\nit might generate). Understanding functional abstractions via their domain,\nrange, and intent is critical to using them correctly in a complex program."
  },
  {
    "type": "p",
    "content": "For example, anysquarefunction that we use to implementsum_squaresshould have these attributes:"
  },
  {
    "type": "p",
    "content": "These attributes do not specify how the intent is carried out; that detail is\nabstracted away."
  },
  {
    "type": "h3",
    "content": "1.3.7   Operators"
  },
  {
    "type": "p",
    "content": "Mathematical operators (such as+and-) provided our first example of a\nmethod of combination, but we have yet to define an evaluation procedure for\nexpressions that contain these operators."
  },
  {
    "type": "p",
    "content": "Python expressions with infix operators each have their own evaluation procedures,\nbut you can often think of them as short-hand for call expressions. When you see"
  },
  {
    "type": "code",
    "content": ">>> 2 + 3\n5\n"
  },
  {
    "type": "p",
    "content": "simply consider it to be short-hand for"
  },
  {
    "type": "code",
    "content": ">>> add(2, 3)\n5\n"
  },
  {
    "type": "p",
    "content": "Infix notation can be nested, just like call expressions. Python applies the\nnormal mathematical rules of operator precedence, which dictate how to interpret\na compound expression with multiple operators."
  },
  {
    "type": "code",
    "content": ">>> 2 + 3 * 4 + 5\n19\n"
  },
  {
    "type": "p",
    "content": "evaluates to the same result as"
  },
  {
    "type": "code",
    "content": ">>> add(add(2, mul(3, 4)), 5)\n19\n"
  },
  {
    "type": "p",
    "content": "The nesting in the call expression is more explicit than the operator\nversion, but also harder to read. Python also allows subexpression grouping\nwith parentheses, to override the normal precedence rules or make the nested\nstructure of an expression more explicit."
  },
  {
    "type": "code",
    "content": ">>> (2 + 3) * (4 + 5)\n45\n"
  },
  {
    "type": "p",
    "content": "evaluates to the same result as"
  },
  {
    "type": "code",
    "content": ">>> mul(add(2, 3), add(4, 5))\n45\n"
  },
  {
    "type": "p",
    "content": "When it comes to division, Python provides two infix operators:/and//. The former is normal division, so that it results in afloating point,\nor decimal value, even if the divisor evenly divides the dividend:"
  },
  {
    "type": "code",
    "content": ">>> 5 / 4\n1.25\n>>> 8 / 4\n2.0\n"
  },
  {
    "type": "p",
    "content": "The//operator, on the other hand, rounds the result down to an integer:"
  },
  {
    "type": "code",
    "content": ">>> 5 // 4\n1\n>>> -5 // 4\n-2\n"
  },
  {
    "type": "p",
    "content": "These two operators are shorthand for thetruedivandfloordivfunctions."
  },
  {
    "type": "code",
    "content": ">>> from operator import truediv, floordiv\n>>> truediv(5, 4)\n1.25\n>>> floordiv(5, 4)\n1\n"
  },
  {
    "type": "p",
    "content": "You should feel free to use infix operators and parentheses in your programs.\nIdiomatic Python prefers operators over call expressions for simple mathematical\noperations."
  },
  {
    "type": "p",
    "content": "Continue:1.4 Designing Functions"
  }
]