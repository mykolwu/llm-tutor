[
  {
    "type": "h2",
    "content": "3.2   Functional Programming"
  },
  {
    "type": "p",
    "content": "The software running on any modern computer is written in a variety of\nprogramming languages. There are physical languages, such as the machine\nlanguages for particular computers. These languages are concerned with the\nrepresentation of data and control in terms of individual bits of storage and\nprimitive machine instructions. The machine-language programmer is concerned\nwith using the given hardware to erect systems and utilities for the efficient\nimplementation of resource-limited computations. High-level languages, erected\non a machine-language substrate, hide concerns about the representation of data\nas collections of bits and the representation of programs as sequences of\nprimitive instructions. These languages have means of combination and\nabstraction, such as function definition, that are appropriate to the\nlarger-scale organization of software systems."
  },
  {
    "type": "p",
    "content": "In this section, we introduce a high-level programming language that encourages\na functional style.  Our object of study, a subset of the Scheme language,\nemploys a very similar model of computation to Python's, but uses only\nexpressions (no statements), specializes in symbolic computation, and employs\nonly immutable values."
  },
  {
    "type": "p",
    "content": "Scheme is a dialect ofLisp, the second-oldest\nprogramming language that is still widely used today (afterFortran). The community of Lisp programmers\nhas continued to thrive for decades, and new dialects of Lisp such asClojurehave some of the fastest growing\ncommunities of developers of any modern programming language. To follow along\nwith the examples in this text, you candownload a Scheme interpreter."
  },
  {
    "type": "h3",
    "content": "3.2.1   Expressions"
  },
  {
    "type": "p",
    "content": "Scheme programs consist of expressions, which are either call expressions or\nspecial forms. A call expression consists of an operator expression followed\nby zero or more operand sub-expressions, as in Python. Both the operator and\noperand are contained within parentheses:"
  },
  {
    "type": "p",
    "content": "Scheme exclusively uses prefix notation.  Operators are often symbols, such as+and*. Call expressions can be nested, and they may span more than\none line:"
  },
  {
    "type": "p",
    "content": "As in Python, Scheme expressions may be primitives or combinations.  Number\nliterals are primitives, while call expressions are combined forms that include\narbitrary sub-expressions. The evaluation procedure of call expressions matches\nthat of Python: first the operator and operand expressions are evaluated, and\nthen the function that is the value of the operator is applied to the arguments\nthat are the values of the operands."
  },
  {
    "type": "p",
    "content": "Theifexpression in Scheme is aspecial form, meaning that while it\nlooks syntactically like a call expression, it has a different evaluation\nprocedure.   The general form of anifexpression is:"
  },
  {
    "type": "p",
    "content": "To evaluate anifexpression, the interpreter starts by evaluating the<predicate>part of the expression. If the<predicate>evaluates to a\ntrue value, the interpreter then evaluates the<consequent>and returns its\nvalue.  Otherwise it evaluates the<alternative>and returns its value."
  },
  {
    "type": "p",
    "content": "Numerical values can be compared using familiar comparison operators, but\nprefix notation is used in this case as well:"
  },
  {
    "type": "p",
    "content": "The boolean values#t(ortrue) and#f(orfalse) in Scheme can\nbe combined with boolean special forms, which have evaluation procedures\nsimilar to those in Python."
  },
  {
    "type": "h3",
    "content": "3.2.2   Definitions"
  },
  {
    "type": "p",
    "content": "Values can be named using thedefinespecial form:"
  },
  {
    "type": "p",
    "content": "New functions (calledproceduresin Scheme) can be defined using a second\nversion of thedefinespecial form. For example, to define squaring, we\nwrite:"
  },
  {
    "type": "p",
    "content": "The general form of a procedure definition is:"
  },
  {
    "type": "p",
    "content": "The<name>is a symbol to be associated with the procedure definition in\nthe environment. The<formal parameters>are the names used within the body\nof the procedure to refer to the corresponding arguments of the procedure. The<body>is an expression that will yield the value of the procedure\napplication when the formal parameters are replaced by the actual arguments to\nwhich the procedure is applied. The<name>and the<formal parameters>are grouped within parentheses, just as they would be in an actual call to the\nprocedure being defined."
  },
  {
    "type": "p",
    "content": "Having defined square, we can now use it in call expressions:"
  },
  {
    "type": "p",
    "content": "User-defined functions can take multiple arguments and include special forms:"
  },
  {
    "type": "p",
    "content": "Scheme supports local definitions with the same lexical scoping rules as\nPython. Below, we define an iterative procedure for computing square roots\nusing nested definitions and recursion:"
  },
  {
    "type": "p",
    "content": "Anonymous functions are created using thelambdaspecial form.Lambdais used to create procedures in the same way asdefine, except that\nno name is specified for the procedure:"
  },
  {
    "type": "p",
    "content": "The resulting procedure is just as much a procedure as one that is created\nusingdefine. The only difference is that it has not been associated with\nany name in the environment. In fact, the following expressions are\nequivalent:"
  },
  {
    "type": "p",
    "content": "Like any expression that has a procedure as its value, a lambda expression can\nbe used as the operator in a call expression:"
  },
  {
    "type": "h3",
    "content": "3.2.3   Compound values"
  },
  {
    "type": "p",
    "content": "Pairs are built into the Scheme language. For historical\nreasons, pairs are created with theconsbuilt-in function, and the\nelements of a pair are accessed withcarandcdr:"
  },
  {
    "type": "p",
    "content": "Recursive lists are also built into the language, using pairs. A special value\ndenotednilor'()represents the empty list. A recursive list value is\nrendered by placing its elements within parentheses, separated by spaces:"
  },
  {
    "type": "p",
    "content": "Whether a list is empty can be determined using the primitivenull?predicate. Using it, we can define the standard sequence operations for\ncomputinglengthand selecting elements:"
  },
  {
    "type": "h3",
    "content": "3.2.4   Symbolic Data"
  },
  {
    "type": "p",
    "content": "All the compound data objects we have used so far were\nconstructed ultimately from numbers. One of Scheme's strengths is working\nwith arbitrary symbols as data."
  },
  {
    "type": "p",
    "content": "In order to manipulate symbols we need a new element in our language: the\nability toquotea data object. Suppose we want to construct the list(a\nb). We can't accomplish this with(list a b), because this expression\nconstructs a list of the values ofaandbrather than the symbols\nthemselves. In Scheme, we refer to the symbolsaandbrather than\ntheir values by preceding them with a single quotation mark:"
  },
  {
    "type": "p",
    "content": "In Scheme, any expression that is not evaluated is said to bequoted. This\nnotion of quotation is derived from a classic philosophical distinction between\na thing, such as a dog, which runs around and barks, and the word \"dog\" that is\na linguistic construct for designating such things. When we use \"dog\" in\nquotation marks, we do not refer to some dog in particular but instead to a\nword. In language, quotation allow us to talk about language itself, and so it\nis in Scheme:"
  },
  {
    "type": "p",
    "content": "Quotation also allows us to type in compound objects, using the conventional\nprinted representation for lists:"
  },
  {
    "type": "p",
    "content": "The full Scheme language contains additional features, such as mutation\noperations, vectors, and maps. However, the subset we have introduced so far\nprovides a rich functional programming language capable of implementing many of\nthe ideas we have discussed so far in this text."
  },
  {
    "type": "h3",
    "content": "3.2.5   Turtle graphics"
  },
  {
    "type": "p",
    "content": "The implementation of Scheme that serves as a companion to this text includes\nTurtle graphics, an illustrating environment developed as part of the Logo\nlanguage (another Lisp dialect). This turtle begins in the center of a canvas,\nmoves and turns based on procedures, and draws lines behind it as it moves.\nWhile the turtle was invented to engage children in the act of programming, it\nremains an engaging graphical tool for even advanced programmers."
  },
  {
    "type": "p",
    "content": "At any moment during the course of executing a Scheme program, the turtle has a\nposition and heading on the canvas. Single-argument procedures such asforwardandrightchange the position and heading of the turtle. Common\nprocedures have abbreviations:forwardcan also be called asfd, etc.\nThebeginspecial form in Scheme allows a single expression to include\nmultiple sub-expressions.  This form is useful for issuing multiple commands:"
  },
  {
    "type": "p",
    "content": "The full repertoire of Turtle procedures is also built into Python as theturtle library module."
  },
  {
    "type": "p",
    "content": "As a final example, Scheme can express recursive drawings using its turtle\ngraphics in a remarkably compact form.  Sierpinski's triangle is a fractal that\ndraws each triangle as three neighboring triangles that have vertexes at the\nmidpoints of the legs of the triangle that contains them.  It can be drawn to a\nfinite recursive depth by this Scheme program:"
  },
  {
    "type": "p",
    "content": "Thetriangleprocedure is a general method for repeating a drawing\nprocedure three times with a left turn following each repetition.  Thesierprocedure takes a lengthdand a recursive depthk.  It draws\na plain triangle if the depth is 1, and otherwise draws a triangle made up\nof calls toleg.  Thelegprocedure draws a single leg of a recursive\nSierpinski triangle by a recursive call tosierthat fills the first half\nof the length of the leg, then by moving the turtle to the next vertex.  The\nprocedurespenupandpendownstop the turtle from drawing as it moves\nby lifting its pen up and the placing it down again. The mutual recursion\nbetweensierandlegyields this result:"
  },
  {
    "type": "p",
    "content": "Continue:3.3 Exceptions"
  }
]